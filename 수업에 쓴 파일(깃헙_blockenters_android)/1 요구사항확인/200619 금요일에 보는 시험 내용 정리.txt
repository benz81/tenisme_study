200619 금요일에 보는 시험 내용 정리
이거 다시 FreePlane에 입력

요구사항 확인 시험에 나오는 페이지
	200615~17에 상세 설명 메모되어있음
	0) 9페이지 !!
	1) 12페이지
		현행 시스템 아키텍처 구성도
			현행 시스템 아키텍쳐 구성도의 정의
				기간 업무를 수행하기 위하여 계층별로 어떠한 기술 요소들을 사용하고 있는지 최상위 수준에서 그림으로 표현한 것이다.
			현행 시스템 아키텍처 구성도 작성 시 고려 사항
				단위 업무 시스템별로 아키텍처가 다른 경우에는 가장 핵심이 되는 기간 업무 처리 시스템을 기준으로 한다.
				--
	2) 14페이지
		하드웨어 구성도
			하드웨어 구성도의 정의
				단위 업무 시스템들이 어디에 위치하고 있는 서버에서 운용되고 있는지 서버의 *주요 사양과 수량, 이중화가 적용되어 있는지 여부를 명시한 것이다.
					*CPU 처리 속도, 메모리 크기, 하드디스크의 용량 등
	3) 22페이지
		운영체제 종류 및 특징
			Windows
				저작자
					Microsoft
				비용 및 라이선스
					유상, 다양한 라이선스 정책
				주요 용도
					중소규모 서버, 개인용 PC, Tablet PC, 임베디드 시스템
			★UNIX
				저작자(운영체제)
					IBM(AIX)
					HP(HP-UX)
					SUN(Solaris)
				비용 및 라이선스
					유상, 다양한 라이선스 정책
				주요 용도
					대용량 처리, 안정성이 요구되는 서버, Server, NAS, Workstation
			Linux
				저작자
					Linus Torvalds
				비용 및 라이선스
					무료, GNU GPLv2
				주요 용도
					중대규모 서버
			iOS
				저작자
					Apple
				비용 및 라이선스
					하드웨어에 번들(Bundle)
				주요 용도
					스마트폰, 태블릿 PC, Music 플레이어 등
			Android
				저작자
					Google
				비용 및 라이선스
					무료, Apache 2.0, GNU GPLv2
				주요 용도
					스마트폰, 태블릿 PC
	4) 25~26페이지
		운영체제 관련 요구사항 식별을 위해 고려해야 할 사항
			(가) 일반적으로 리눅스 기반 시스템이 하드웨어 및 소프트웨어 소유 비용이 가장 적게 소요된다.
			(나) 유지 및 관리 비용 측면에서는 윈도우즈 기반 시스템이 강점을 가진다.
			(다) 안정적이고 신뢰할 수 있으며 대용량 처리를 위해서는 유닉스 기반 시스템이 선호되고 있다.
				- 유닉스는 문제가 생기면 바로 와서 처리해준다.
			(라) 32bit 운영체제는 4GB 메모리까지 액세스 가능(사용자 메모리는 2GB)하지만, 64bit 운영체제에서는 4GB 이상의 메모리에 엑세스 가능하며 구체적인 한계는 운영체제의 종류 및 버전에 따라 다양하다.
				- 운영체제 bit에 따라 돌아갈 수 있는 램에는 한계가 있다.
			(마) 시스크(CISC) 설계방식이 적용된 인텔의 x86 아키텍처 기반 칩을 사용하고 있는 하드웨어는 윈도우즈나 리눅스를 운영체제로 설치할 수 있으며, 리스크(RISC) 설계방식이 적용된 칩들은 유닉스 운영체제를 설치한다.
				- CPU 방식이 시스크냐 리스크냐에 따라 설치할 수 있는 운영체제가 달라진다.
			(바) HP와 Intel이 협력해서 만든 아이테니엄 아키텍쳐(IA)-64 칩은 여러 운영체제를 지원한다.
			(사) 리스크(RISC) 설계 방식이 적용된 암(ARM) 칩은 스마트폰이나 태블릿에 주로 채용되고 있으며, IOS, Android 등의 운영체제를 지원하고 있다.
				- ARM 칩은 거의 모든 스마트폰이나 태블릿에 들어있다.
				- ARM : 동명의 칩을 설계하는 회사 이름이기도 함
	5) 32페이지
		온라인 트랜잭션 처리(OLTP)를 위한 기초 자료 조사 항목
			OLTP : Online Transaction Processing
			트랜잭션 : 서버에서 "호출된(한 번 주고받은)" 수라고 생각하면 된다. 사전적 뜻은 "거래"
		시스템 구축 형태
			- 단독 시스템(Single System)
			- 고가용성 시스템(HA System)
			- 병렬 구성 여부
		사용자 수
			- 전체 사용자 수
			- 동시 사용자 비율
			- 동시 사용자당 평균 질의 수(1일)
			- 가동 시간 중 *피크타임의 시간
			- 연간 사용자 증가율
				*기동시간 중 피크타임의 시간은 중요함.
		트랜잭션 수
			- 연간 트랜잭션 수
			- 1일 평균 트랜잭션 수
			- 피크타임 트랜잭션 수
			- 예상 연간 트랜잭션 증가율
		온라인 업무
			- "검색, 갱신, 삽입, 삭제" 별 레코드 크기 및 전체 건수
				온라인 업무 : "실시간으로" 처리하는 업무
		배치 업무
			- 온라인 업무에 대한 배치 업무 비중
			- 배치 업무 구분
			- 대량 배치 기준으로 데이터 건수 및 길이
				배치 업무(배치 작업) : 하루동안 발생한 여러 통계치 데이터를 수집하는 등 주기적으로 "모아서" 처리하는 작업
		데이터베이스
			- 데이터 크기(초기, 1년차, 2년차, 3년차 및 이후 데이터 증가율)
			- 데이터 중 이미지, 사운드, 텍스트 파일의 비율
			- 인덱스 테이블의 초기 크기 및 3년 내 크기
			- 가장 큰 테이블의 레코드 건수
			- 데이터베이스 크기
		데이터 백업
			- 데이터 백업
			- 데이터 백업 서버의 운영 여부
			- 백업 장치의 접속 패턴
			- 백업 데이터의 양
		운영 시간
			- 운영 시간 7x24 여부
		--
	6) 33~34페이지
		개발 기술 환경 결정을 위한 고려 사항
			! 운영체제
				- 시스템 구축 예산이 적은 경우(예 2천만원 이하)에는 유닉스를 도입하기 어렵다.
				- 유닉스는 안정적이고 대량의 처리가 가능하고 기술 지원이 용이하나 비용이 많이 소요된다.
				- 리눅스는 비용이 저렴하나 유지 관리를 위한 기술 인력을 보유하거나 별도의 계약을 체결해야 한다.
				- 윈도우즈는 유지 관리 기술 인력 확보가 용이하고 유닉스에 비해 상대적으로 비용이 저렴하나, 대부분의 대용량 처리 서버에 설치할 수 없다.
			! DBMS
				- 상용 DBMS의 경우 안정적이며 확장성이 뛰어나고 기술 자원을 받기 용이하나 비용이 많이 소요된다.
				- 오픈 소스 DBMS의 경우 비용이 저렴하나, 관련된 기술력을 자체적으로 확보할 필요가 있다.
				- 일반적으로 많이 사용되고 있는 DBMS(상용 or 오픈소스 모두)를 선택하면 관련 기술 인력 및 기술 자료를 확보하기 용이하고 문제 해결이 용이하다.
			! 웹 애플리케이션 서버(WAS: Web Application Server)
				- 표준 규격을 준수하는 WAS의 경우 개발용과 운영용을 구분하여 사용할 수 있다. 개발용은 가볍고 빠른 오픈 소스 WAS를 선택할 수 있다.
				- 상용 WAS의 경우에는 안정적이며, 대량 처리가 검증되어 있고 기술지원을 받기가 용이하다.
				- 오픈 소스 WAS의 경우 일반적으로 널리 사용하는 WAS를 선택하는 것이 바람직하다.
				--
	7) 36페이지
		요구 공학 개요
			요구사항을 정의하고, 문서화하고, 관리하는 프로세스
		★요구 분석 사항에 대해 각 설명에 해당하지 않는 것은?
		★요구사항 개발 프로세스
			1) 도출
				요구사항 소스
				도출 기법
			2) 분석
				요구사항 분류
				개념 모델링
				기술 구조 설계 및 요구사항 할당
				요구사항 협상
			3) 명세
				시스템 정의서
				시스템 요구사항 명세서
				소프트웨어 요구사항 명세서
			4) 확인
				검토
				프로토타이핑
				모델 검증
				인수 테스트
				--
	8) ★50페이지 - 단답형
		"프로토타이핑(Prototyping)"
		요약 : 개발에 필요한 부분 중 내가 예상한 '기능'이 실제로 동작하는지 코드로 '그 부분만 미리' 짜고 실험해보는 것.
			(가) 프로토타이핑은 새로운 요구사항을 도출하기 위한 수단으로, 또한 소프트웨어 요구사항에 대해 소프트웨어 엔지니어가 해석한 것을 확인하기 위한 수단으로 많이 사용된다
			(나) 프로토타이핑의 장점은 분석가의 가정을 파악하고 잘못된 경우 유용한 피드백을 제공한다는 점, 사용자 인터페이스의 동적인 행위가 문서나 그래픽 모델보다 프로토타입으로 이해하기 쉬운 점, 요구사항의 가변성이 프로토타이핑 이후에 급격히 감소하는 점이다.
			(다) 단점은 사용자의 관심이 핵심 기능에서 멀어지고 프로토타입의 디자인이나 품질 문제로 집중될 수 있으며, 프로토타입 수행 비용이 발생한다는 것이다.
			(라) 잘못된 요구사항을 만족시키기 위하여 자원을 낭비하는 것을 방지할 수 있다는 점에서 프로토타이핑을 긍정적으로 검토할 수 있다.
				요새 기업들은 프로토타이핑 방식을 많이 쓴다.
					문제가 될 수도 있는 사항을 미리 발견해서 미리 피드백을 받을 수 있기 때문이다.
	9) 64페이지
		유스케이스 모델 검증 - 점검 대상
			액터
				- 기능 구현에 관계되는 액터가 모두 도출되었는가?
				- 액터 목록에서 액터명이 역할 중심으로 명명되었는가?
				- 요구사항 정의서, 요구사항 기술서에 외부/내부 액터가 모두 도출되었는가?
				- 액터 목록과 액터 명세서에 기록된 액터가 타당한지 확인
			유스케이스
				- 요구기능 구현에 필요한 유스케이스가 모두 도출되었는가?
				- 도출된 유스케이스를 논리적으로 연결하여 누락된 기능을 파악
				- 도출된 유스케이스가 유스케이스 목록과 유스케이스 명세서에 반영되었는지 확인
				- 도출된 유스케이스의 논리적인 합이 과업 범위와 일치하는지 비교
				- 도출된 유스케이스들이 논리적으로 그룹화되었는지 확인(그룹화하는 액터 기준, 연관 관계 기준, 동시성 기준이 가능)
				- 유스케이스 기능 범위가 다른 유스케이스 기능 범위와 중복되는지 확인
			유스케이스 명세서
				- 유스케이스 명세서 형식에 중요 항목이 누락되지 않았는지 확인 (사전 및 사후 조건, 주요 흐름, 서브 흐름, 예외 흐름 등)
					사전 및 사후 조건 ex) 클릭 전, 클릭 후 액션
					예외 흐름 : 예외 상황이 나왔을 때 어떻게 처리를 할 것인가
					기획자는 위 두개를 잘 검증해야 한다.
				- 유스케이스의 주요 이벤트 흐름이 모두 도출되고 논리적으로 타당한지 확인
				- 유스케이스를 구현하기 위하여 필요한 입출력 항목이 모두 도출되었는지 확인
	10) 65/67(68)페이지
		*65페이지
		개념 수준의 분석 클래스 검증
			개념 수준의 주요 분석 클래스를 적절히 도출하였는지, 관련 정보가 명확한지 점검해야 한다.
			! 주요 점검 항목
				- 개별 유스케이스 단위로 작성하지 않고 시스템 전체를 대상으로 작성하였는가?
				- 중요도가 높은 요구사항 또는 유스케이스에 필요한 엔터티 클래스가 도출되었는가?
				- 도출된 클래스 이름과 설명이 이해관계자 간에 이견이 발생하지 않도록 명확한가?
				- 클래스의 속성은 도출하였는가? 도출된 속성의 이름과 설명이 정확한가?
				- 클래스들 간에 순환적 관계가 불필요하게 정의되어 있는가?
				- 클래스 간의 관계에서 다중성이 정의되었는가?
		*67페이지
		분석 클래스 검증
			- 유스케이스마다 분석 클래스가 적절히 도출되었고, 제어 클래스의 도출 등이 충분하고 상세하게 도출되어 클래스의 역할, 클래스 간의 관계, 메시지 흐름 등을 확인할 수 있는지 검토한다.
			! 유스케이스 실현에 필요한 분석 클래스 도출 확인
				- 하나의 유스케이스를 실현하기 위하여 3개 이상의 클래스가 역할 기준으로 도출되어야 하며, 유스케이스 별로 실현에 필요한 클래스가 추적 가능해야 클래스 누락 여부를 확인할 수 있다.
				- 유스케이스 별로 도출된 분석 클래스들이 역할 기준으로 경계(Boundary), 엔터티(Entity), 제어(Control) 클래스가 도출되어 스테레오 타입으로 표시되었는지 확인한다.
			! 분석 클래스의 스테레오 타입
				★분석 클래스 유형★ 하면 이거
				역할 구분
					경계<<Boundary>>
						├○ (벽에 붙어있는 원)
						시스템 외부 액터(=유저)와의 "상호작용"을 담당하는 클래스
							연결된 액터마다 1개의 경계 클래스가 존재하는지 확인한다.
						ex) 액티비티 클래스
					엔터티<<Entity>>
						Ω (바닥에 붙은 원)
						시스템이 유지해야 하는 "정보"를 관리하는 기능을 전담하는 클래스
						ex) ContactManager - Contact 클래스 : 정보의 저장/사용/접근권한을 관리
					제어<<Control>>
						Q (진행화살표가 있는 원)
						시스템이 제공하는 기능의 로직 및 "제어(액션, 행동)"를 담당하는 클래스
							유스케이스당 일반적으로 1개의 제어 클래스가 존재한다.
						ex) ContactManager - DataHandler 클래스
		★분석 클래스 검증에 해당하지 않는 것은?
	11) 66페이지(70페이지)
		! 클래스 간 다중성 예시
			-----				-----
			[고객]  -------  [주문]  <- 클래스 이름
			-----  1	  0..* -----
			[+이름]				[+일시]  <- 속성(멤버변수)
			[+성별]				[+일련번호]
			{+주소]				[+수량]
									[+가격]
			-----				-----
												<- 연산(메소드)
			-----				-----		매개변수(파라미터)
		! 클래스 간 다중성 표기법
			+
				public
			0..1
				0 또는 1개의 인스턴스
				n..m은 n에서부터 m까지의 범위를 의미한다.
			0..* 또는 *
				0을 포함한 무한개의 인스턴스
			1
				1개의 인스턴스
			1..*
				1개 이상의 인스턴스
	12) ★71페이지 - 단답형
		경계 및 제어 클래스 도출 및 상세화 정도 확인(상세 검토 사항)
			유스케이스 단위로 분석 클래스를 확인한다.
			! 경계
				- 유스케이스와 연결된 "액터"가 있고, 액터의 유형이 시스템 또는 장비인 경우, 해당 액터를 위한 경계 클래스가 도출되었는지 확인하고, 유스케이스의 이벤트 흐름을 참조하여 관련 기능을 처리하기 위한 연산이 도출되었는지 확인한다.
				- 유스케이스 명세서의 이벤트 흐름을 확인하여, 유스케이스에서 필요한 UI를 위한 경계 클래스가 도출되었는지 확인한다.
				- UI를 위한 경계 클래스인 경우, 사용자에게 제공할 항목이 속성으로 도출되었는지 확인하고, 화면, 보고서 상의 데이터 타입, 길이가 경계 클래스 속성 정의와 일치하는지 확인한다.
			! 제어
				- 유스케이스 별로 제어 클래스가 1개 이상 도출되었는지 확인한다.
				- ★제어 클래스의 연산에 대응하는 엔터티 클래스가 있는지 확인한다.
				- 유스케이스 명세서에 기술된 이벤트 흐름을 처리하기 위한 연산이 제어 클래스에 정의되어 있는지 확인한다.
		*프로토타이핑 말고는 전부 문서상의 검토 사항이지 앱 제작중이나 제작후 검증 단계가 아니다.
	13) 77페이지
		분석 모델의 기술적 타당성 검증 절차
			요구사항 확인 과정 전체에 문제점이 없는지 검증하는 과정
		1. 성능 및 용량 산정 적정성
			- 요구사항을 만족시키기 위한 분석모델에 따라 시스템을 구현할 때 요구되는 시스템의 자원을 식별한다.
			- 분석 클래스에서 불필요하고 지나치게 많은 속성들을 포함시키게 되면 객체 생성시 시스템의 메모리 자원을 많이 요구하게 되며, 이로 인해 JVM에서 과도한 가비지 컬렉션이 발생하여 전체 시스팀의 성능 저하가 빈번히 발생한다.
		2. 시스템 간 상호 운용성
				타 업체와 서비스 연동시 중요한 사항.
				ex) 이벤트로 타 업체 쿠폰 뿌리기 등
			- 분석모델을 이용하여 보다 구체적으로 시스템간 상호 정보 및 서비스를 교환 가능한지 검토한다.
			- 분석모델에서 정의한 구체적인 정보의 존재 여부, 생성 가능성, 교환 방식 지원 등에 대해서 확인한다
		3. IT시장 성숙도 및 트렌드 부합성
			- 분석모델이 과거의 문제를 해결하고 많이 사용되는 트렌드에 부합하는지 확인한다.
			- 예를 들어, 시스템에서 중요하고 빈번하게 사용되는 클래스를 Spring의 프로토타입 빈(Prototype Bean)으로 사용할 것을 가정하고 분석모델이 작성되지 않았는지 검토한다.
		4. 기술적 위험 분석
				사람들이 잘 쓰지 않는 최신 기술은 사용 및 보수가 힘든 점을 참고해야 한다.
			- 분석모델이 시스템의 기술 구조, 프레임워크, 사용되는 하드웨어 및 소프트웨어와 부합하는지 확인한다.
			- 분석모델이 검증되지 않은 기술의 사용을 가정으로 하고 있어 추가적인 비용 발생 가능성이 있는지 확인한다.
			- 분석모델을 구현하기 위하여 특정 업체 기술, 특허, 라이선스에 의존해야 하는지 확인한다.

===============================================


14문제

1) 9페이지
2) 12페이지
3) 18페이지
4) 21페이지(25~26페이지와 연결)
5) 27~28페이지
6) 30페이지
7) 33~34페이지
8) 36페이지
9) 50페이지 !! - 단답
10) 54페이지
11) 63~64페이지
12) 66페이지 !! 
13) 68~69페이지(71페이지와 연결)
14) 77페이지 !! - 단답

==============위에 맞춰서 아래 다시 정리===============

시험
	문제 14문제
	10시 반부터 시험.
	현행 시스템 분석하기
	
	1) 9 페이지 현행 시스템 파악의 절차 "구성/기능/인터페이스 파악~ 시험에 나옴
	2) 12 페이지 시스템 아키텍쳐 구성도의 "정의" 시험에 나옴
!!) 14 페이지 안나옴
	3) 18 페이지 네트워크 구성도 그림에서 "용어" 문제가 나옴
		그림 오른쪽 아래 "라우터"/ 방화벽
	4) 21페이지 운영체제의 "정의"와 "종류"
		25~26 페이지와 연결됨
	5) 27페이지 DBMS의 "정의"
		28페이지도 중요함???
	6) 30페이지 오픈 소스의 "정의"
		32페이지도 중요??? 왠지 안 나올 거 같음.
	7) 33~34 페이지
	8) 36 페이지 요구사항 도출, 요구사항 분석, 요구사항 명세(여기서 문서 만듦) 그 다음에 문서 돌려서 검토함(요구사항 확인)
	9) 50 페이지 무조건 나옴 프로토타이핑
	10) 54 페이지 "유즈케이스 명세서" "액션과 관련된 문서"
??) 59 페이지 절차, 검토 단계
	11) 63 페이지 절차, 검토 단계
		64 페이지와 연결 : 용어(액터, 유스케이스 등)를 알아라. 점검 내용은 몰라도 됨.
??) 65 페이지???
	12) 66 페이지 이거 무조건 나옴. 숫자가 뭘 의미하는지.
		고객 한명당 주문은 몇 개 받을 수 있는가를 클래스 다이어그램으로 그릴 때의 예시임.
	13) 68~69 페이지 스테레오 타입. 그림이 뭘 의미하는지 볼 줄 알아야 함.
		71 페이지 내용 알면 좋음.
	14) 77 페이지 무조건 나옴.