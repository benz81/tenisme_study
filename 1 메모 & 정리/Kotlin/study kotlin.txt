var : 변수
val : 상수 // 다시 알아보기


// val
val로 지정된 불변 타입 변수는 초기에 값을 할당되면 나중에 값을 변경할 수 없으며 값을 변경하게 되면 컴파일 에러가 발생합니다.
즉, 값을 초기화만 가능하고 변경은 불가합니다.
Java에서는 final과 같다고 볼수있습니다.
val은 한번만 초기화 되며 값을 변경할 수 없지만 컴파일러가 코드 문맥을 확인시 val 변수가 한번만 초기화 되는것이 맞다면 개발자가 상황에 따라 val를 여러 값으로 초기화(할당) 할 수 있습니다.
val은 초기화 후 값을 변경이 불가능한 것이 맞습니다.
하지만 변수의 참조가 가리키는 객체의 내부 값은 변경이 가능합니다.





전역변수(속성) : Property
지역변수 : Local Variable





자료형
정수 : Byte(8bits) / Short(16) / Int(32) / long(64)
실수 : Float(32) / (기본)Double(64)
문자 : Char(16bits, 2bytes)
문자 : String
논리 : Boolean
Any : 어떤 자료형이든 상관없이 호환되는 코틀린 최상위 자료형





\t : 탭 
\b : 백스페이스 
\r : 첫 열로 커서 옮김 
\n : 개행 
\' : 작은따옴표 
\" : 큰 따옴표 
\\ : 역슬래시 
\$ : $문자 
\uxxxx : 유니코드 문자





// 형변환 함수
.toByte()
.toShort()
.toInt()
.toLong()
.toFloat()
.toDouble()
.toFloat()
.toDouble()
.toChar()





// 명시적 형변환
변환될 자료형을 개발자가 직접 지정함


// 암시적 형변환
자료형을 지정하지 않아도 자동으로 형변환이 됨





// 배열
배열 선언 예시
ex) var a: Array<T>
한 번 설정한 크기는 변경할 수 없음.





// 타입 추론
변수나 함수들을 선언할 때나 연산이 이루어질 때 자료형을 코드에 명시하지 않아도 코틀린이 자동으로 자료형을 추론해주는 기능
선언시 값을 할당해줘야 한다는 제약이 있음.
반드시 특정 자료형을 지정해야하는 것이 아니면 타입 추론 기능을 활용해 코드 양을 줄임.
ex) var stringValue = "one line string test"
1234 > Int
1234L > Long
12.34 > Double
12.34f > Float
0xABCD > Int
0b0101010 > Int
true/false > Boolean
'c' > Char
"asdfasdf" > String





// 함수
코틀린에서 함수는 어디에나 둘 수 있음.
코틀린에서는 자료형이 결정된 변수라는 개념으로 접근하는 것이 좋다.
함수 예시) fun function(a: Int){return b}





// 조건문


// 비교연산자
부등호 사용 : <  <=  >  >=  ==  !=
is : 자료형이 맞는지 체크한다
!is : 자료형이 틀렸는지를 체크한다
ex) a is Int


// 할당연산자
ex) a = 7


// when
switch문을 편리하게 바꾼 기능
when 안의 조건에는 등호나 부등호의 사용이 불가함. 
여러개의 조건이 나와도 먼저 부합하는 조건만 실행됨.





// 조건형 반복문
	while / do while


// 범위형 반복문
// 반복문 예시 : for
// var i로 쓰지 않아도 됨
for(i in 0..9 step 3) {
	print(i)
}
for(i in 9 downTo 0) { // downTo 0 뒤에도 step을 붙일 수 있음.
	print(i)
}
for(i in 'a'..'e') { // Char 형태로도 반복 가능함
	print(i)
}


// 증감(증가/감소)연산자
++a : 전위연산자 - 연산자가 포함된 구문에서 증감된 수를 반영함
a++ : 후위연산자 - 증감된 수를 해당 구문에서 사용하지 않고 '다음 구문'부터 사용함
 
// 코드 흐름 제어
return
	값 반환 혹은 리턴
break(반복문)
	구문이 실행되는 중간에 즉시 반복문을 종료하고 다음 구문으로 넘어감
continue(반복문)
	자신이 포함된 구문의 다음 반복조건으로 즉시 넘어감. 자신의 아래에 있는 코드들은 수행하지 않음.
label
	지정한 라벨을 기준으로 break하거나 continue함





// 논리연산자
&&(and)  ||(or)  !(not)





// 클래스의 기본 구조
클래스는 속성(변수)과 함수로 이루어져있음.
클래스는 인스턴스 객체(실체)를 만드는 틀이다.
인스턴스는 클래스를 이용해서 만들어내는 서로 다른 속성의 객체를 지칭하는 용어 
	ex) 특정 기능을 하는 클래스에 공통된 성격의 데이터들을 추가해 클래스를 틀로 하는 각 데이터들의 인스턴스를 만들 수 있다
자주 사용하는 공통적인 기능은 함수로 만들게 된다.


// 생성자 : constructor
새로운 인스턴스를 만들기 위해 호출하는 특수한 함수
생성자를 호출하면 클래스의 인스턴스를 만들어 반환받을 수 있음


// 생성자의 기능
인스턴스의 속성을 초기화
인스턴스 생성시 구문을 수행


// init 함수
패러미터나 반환형이 없는 생성자 함수.
생성자를 통해 인스턴스가 만들어질 때 호출되는 함수.


// 보조 생성자
	constructor() : this() {}


// 초기화
속성의 값을 정해주는 작업





// 클래스의 상속
상속이 필요한 경우 두가지
1. 기존 클래스를 확장해 기능을 추가한 클래스를 만들기 위해
2. 기존 클래스들의 공통점을 뽑아 새로운 클래스를 만들어 코드 관리를 편하게 해야할 때


// 수퍼클래스
속성과 함수를 물려주는 클래스


// 서브클래스
속성과 함수를 물려받는 클래스


// 기타 정보 1
코틀린은 상속 금지가 기본값이다.
	클래스를 상속하게 하려면 클래스 선언시 open 상태로 만들어줘야 한다.


// 상속에 대한 규칙
1. 서브 클래스는 수퍼 클래스에 존재하는 속성과 같은 이름의 속성을 가질 수 없음
2. 서브클래스가 생성될 때는 반드시 수퍼클래스의 생성자까지 호출되어야 함
3. 서브 클래스를 만들 때 받는 값에 var, val을 붙이면 클래스 자체(고유)의 속성으로 선언된다. 수퍼클래스의 속성값을 그대로 받아서 수퍼에 넘겨주고 싶을 때(나 그냥 내부에서 쓰고싶을 때)는 var, val을 제외하고 적어야한다.


// 기타 정보 2
지나친 상속은 코드를 더 어렵게 만든다.


// 오버라이딩
수퍼클래스의 함수 선언 형태를 서브클래스에서 그대로 받아서 실행 내용을 새롭게 작성(재구현)해 사용할 수 있다.
수퍼클래스의 허용이 필요함.
상속을 허용할 함수 앞에 open을 추가해주면 된다.


// 추상화 1 : abstraction
선언부만 있고 기능이 구현되지 않은 추상함수와 추상함수를 포함하는 추상클래스가 있음
ex) 함수의 구체적인 구현은 없고 Animal의 모든 서브클래스는 eat이라는 함수가 '반드시 있어야 한다'는 점만 명시하여, 각 서브클래스가 비어있는 함수의 내용을 필요에 따라 구현하도록 하려고 할 때 Animal을 추상 클래스로 만든다.
★추상 함수는 비어있는 껍데기라고 생각하자.
★추상 클래스는 일부 함수가 구현되지 않은 '미완성 클래스'이기 때문에 단독으로는 인스턴스를 만들 수 없다. 따라서 '반드시' 서브클래스에서 '상속을 받아' abstract표시가 된 함수들을 '구현해줘야 한다'.


// 추상화 2 : interface
기존 개념은 추상 함수로만 이루어진 순수 추상화 기능을 뜻한다.
코틀린에서는 인터페이스도 일반 클래스와 같이 속성, 추상함수, 일반함수를 가질 수 있다.
다만 추상함수(? abstract 말하는 건가)는 생성자를 가질 수 있는 반면 인터페이스는 생성자를 가질 수 없으며
★★★★인터페이스에서 구현부가 없는 함수는 abstract 함수로 간주하고 구현부가 있는 함수는 open 함수로 간주한다. 그러므로 별도의 키워드가 없어도 포함된 모든 함수를 서브클래스에서 구현 및 재정의가 가능하다.
한 서브클래스가 여러 인터페이스를 상속받을 수도 있으므로 좀 더 유연한 설계가 가능하다.


// 상속시 주의할 점
여러개의 인터페이스나 클래스를 상속받을 때 같은 이름과 형태를 가진 함수를 구현하고 있다면 서브클래스에서는 혼선이 일어나지 않도록 반드시 오버라이딩하여 재구현해주어야 한다


// 오버라이딩 & 추상화 정리 : 
오버라이딩 : 이미 구현이 끝난 함수의 기능을 서브클래스에서 변경해야 할 때 사용
추상화 : 형식만 선언하고 실제 구현은 서브클래스에 일임할 때 사용
	인터페이스 : 서로 다른 기능들을 여러개 물려주어야 할 때 유용함





// 기본 프로젝트 구조
실제 코딩시에는 프로젝트라는 구조로 만들게 된다
프로젝트는 코틀린으로 어플리케이션을 짤 때 관련한 모든 내용을 담는 큰 틀이다.


// 모듈
하나의 프로젝트는 여러개의 모듈로 이루어져 있다.
모듈은 직접 만들 수도 있고, 필요한 기능을 이미 구현해 둔 '라이브러리 모듈'을 가져와 붙일 수도 있기 대문에 굉장히 편리한 기능 단위이다.
모듈 안에는 다수의 폴더와 파일이 들어갈 수 있다.
코틀린 코드 파일뿐만 아니라 모듈과 관련된 설정 및 리소스 파일 등도 포함될 수 있음.

프로젝트, 모듈, 폴더 및 파일이 실제 파일 시스템에 기반한 '물리적인 구조'를 담당한다


// 패키지
'논리적인 구조'를 담당한다
개발시에 소스 코드의 '소속'을 지정하기 위한 논리적 단위이다.
코드를 작성할 때에는 코드 내에서 사용하는 이름이 용도에 따라 서로 충돌하지 않도록 유니크한 패키지 이름을 지어주는 것이 좋다.


// 패키지명 규칙
1. 도메인을 거꾸로 배열
2. 그 뒤에 프로젝트명을 붙임
3. 그 뒤에 기능별로 세분화하는 방식으로 짓는다.


// 코드 파일들을 패키지로 묶는 방법
1. 코드 파일 맨 윗줄에 pakage를 적고
2. 패키지 이름을 적어주면 된다.


// 기타 패키지에 대한 설명
패키지를 명시하지 않으면 자동으로 default 패키지로 묶이게 된다.

코틀린은 자바와 달리 폴더 구조와 패키지명을 일치시키지 않아도 된다. 단순히 파일 상단에 패키지만 명시해주면 컴파일러가 알아서 처리하게 된다. 

같은 패키지 안에서는 변수 및 함수, 클래스를 공유할 수 있음. 서로 이름만 부르면 쓸 수 있음. 

패키지가 다르면 그냥 쓸 수는 없음. import라는 작업을 해줘야 함. 패키지 선언 아래에 import를 쓰고 사용할 외부 패키지 이름을 적어주면 다른 패키지의 변수, 함수, 클래스 등을 그대로 사용할 수 있음.

여러 클래스를 import로 참조했는데 요소들의 이름이 겹치는 경우에는 요소 이름 앞에 패키지명을 포함한 풀네임을 명시해야 한다.

코틀린은 클래스명과 파일명이 일치하지 않아도 된다. 또 하나의 파일에 여러개의 클래스를 넣어도 알아서 컴파일이 가능하다. 파일이나 폴더를 기준으로 구분하지 않고 파일 내에 있는 pakage 키워드를 기준으로 구분하기 때문이다.





//// 변수, 함수, 클래스의 접근 범위와 접근제한자

// 스코프(scope) : 범위
	★★★★멤버들의 가용 범위를 지정해 둔 단위
	개발자는 의도에 따라서 스코프 안에 변수나 함수, 클래스를 배치할 수 있다.
	프로젝트 내에서 변수, 함수, 클래스의 공용 범위를 제어하는 단위
	언어 차원에서 변수나 함수, 클래스같은 '멤버'들을 서로 공유하며 사용할 수 있는 범위를 지정해 둔 단위이다.
	스코프가 지정되는 범위는 패키지 내부, 클래스 내부, 함수 내부 등이 있다.
	ex) 하나의 패키지 안에 변수, 함수, 클래스가 있다면 이것들은 모두 하나의 스코프 안에 있는 멤버들이다. 여기에 포함된 함수나 클래스에 또다른 변수나 함수가 들어있다면 패키지 스코프 안에 또다른 하위 스코프로 동작하게 된다.

// 스코프에 대한 세가지 규칙
	1. 스코프 외부에서는 스코프 내부의 멤버를 '참조연산자'로만 참조가 가능하다.
		ex) 클래스의 멤버를 참조할 때 클래스 외부에서 인스턴스명의 참조연산자를 사용하여 접근했다. a.eat()에서  . <-이 부분이 참조연산자.
	import(다른 패키지 참조시) 뒤에 붙는 것도 참조연산자. 참조한 패키지 안에 있는 모든 멤버를 직접 참조한다.
	2. 동일 스코프 내에서는 멤버들을 공유할 수 있다.
	default 패키지 상태에서 만드는 모든 멤버들은 같은 패키지 스코프에 포함된다고 생각하면 된다.
		ex) 변수 a는 클래스 B나 main 함수에 속해있지 않지만 동일한 스코프 내에서 변수를 공유하여 사용할 수 있다
	3. 하위 스코프에서는 상위 스코프의 멤버를 재정의할 수 있다
	스코프의 같은 레벨에서는 같은 이름의 멤버를 만들어서는 안된다.
		ex) 같은 이름의 변수를 두 개 선언하면 conflicting declarations(선언부 충돌) 에러가 난다.
		하지만 하위 스코프에서는 같은 이름의 멤버를 만들어서 사용할 수 있다.
		ex) 2의 예시에서 main함수나 클래스 안에 변수 a를 값을 다르게 하여 새로 만들어 출력하면 상위 스코프의 변수 a를 참조하지 않고 각각의 스코프에 있는 값을 참조한다


// 기타 정보 3
인스턴스를 변수에 담지 않고 바로 사용할 수 있음.
ex) B().print()


// 접근제한자
★★★★스코프의 외부와 내부에서 사용할 멤버를 분리하여 스코프 외부에서 건드리지 말아야 할 기능이나 값들을 안전하게 제한하는 용도를 가지고 있음.
스코프 외부에서 스코프 내부로 접근하는 것을 개발자가 제어할 수 있음
public
internal
private
protected
변수, 함수, 클래스 선언시 맨 앞에 붙여 사용한다 


// 패키지 스코프에서의 접근제한자
public : 어떤 패키지에서도 접근 가능 (기본값)
internal : 같은 모듈 내에서만 접근 가능
private : 같은 파일 내에서만 접근 가능
protected는 패키지 스코프에서는 사용하지 않는다


// 클래스 스코프에서의 접근 제한자
public : 클래스 외부에서 늘 접근 가능 (기본값)
private : 클래스 내부에서만 접근 가능
protected : 클래스 자신과 상속받은 클래스에서만 접근 가능
internal은 클래스 스코프에서는 사용하지 않음





// 고차함수
함수를 클래스에서 만들어 낸 인스턴스처럼 취급하는 방법이다.
함수를 패러미터로 넘겨줄 수도 있고 결과값으로 반환받을 수도 있는 방법이다.
코틀린에서는 모든 함수를 고차 함수로 사용 가능하다.


// ★★★★(고차함수) 함수를 패러미터로 보내는 방법
함수가 받을 패러미터의 자료형을 나열하고 (자료형, 자료형, ...)
->를 적어준 다음 함수가 반환하는 자료형(반환형)을 적어주면 된다.
이런 형태와 같은 형식의 함수는 모두 패러미터로 받을 수 있다.
ex) fun a (str: String) {
    println("$str 함수 a")
}
fun b (function: (String)->Unit){
    function("b가 호출한")
}
(String)->Unit 이 형식은 함수를 나타내는 자료형의 일종이다.
★'Unit'은 반환형에는 값이 없다는 뜻이다.
ex2) b(::a) // 함수 b를 호출하면서 함수 a를 패러미터로 넘겨줌. 함수 a 앞에 ::연산자를 붙여주면 일반 함수를 고차 함수로 변경해준다.


// 람다함수
람다함수는 일반함수와 달리 그 자체가 고차함수이다.
별도의 연산자 없이도 변수에 담을 수 있다.
일반적 람다식 예시) 
	var c: (String)->Unit = {str -> println("$str 람다함수")}
람다 역시 변수에 할당할 때는 타입 추론 기능을 이용해 좀 더 축약해서 기술할 수 있다.
ex) var c = {str: String -> println("$str 람다함수")}


// 고차함수 & 람다함수 요약
고차함수와 람다함수를 사용하면 함수를 일종의 변수로 사용할 수 있다.
컬렉션의 조작이나 스코프 함수의 사용에도 도움이 된다.





// 스코프(scope) 함수
람다 함수를 이용한 기능
람다 함수도 일반 함수처럼 여러 구문의 사용이 가능하다.
함수형 언어의 특징을 좀 더 편리하게 사용할 수 있도록 기본 제공하는 함수들
클래스에서 생성한 인스턴스를 스코프 함수에 전달하면 인스턴스의 속성이나 함수를 좀 더 깔끔하게 불러서 쓸 수 있다.
apply
	인스턴스를 생성한 후 변수에 담기 전에 초기화 과정을 수행할 때 많이 쓰인다.
	사용 방법 : 생성자로 클래스 선언할 때 참조연산자를 사용하여 .apply를 붙이고 그 뒤에 중괄호를 붙여 람다 형식의 함수 하나를 만들어준다.
run
	apply처럼 run 스코프 안에서 참조연산자를 사용하지 않아도 된다
	★★★하지만 일반 (람다)함수처럼 인스턴스 대신 마지막 구문의 결과값을 반환한다.
	이미 인스턴스가 만들어진 후에 인스턴스의 함수나 속성을 스코프 내에서 사용해야 할 때 유용하다.
with
	run과 동일한 기능을 가지지만 인스턴스를 참조연산자가 아닌 패러미터로 받는다.
	ex) a.run {}
		 with(a) {}
also
	처리가 끝나면 인스턴스를 반환한다. (apply와 같음)
	but 패러미터로 인스턴스를 넘긴 것 처럼 it을 통해서 인스턴스를 사용할 수 있다.
	ex) 예시의 it.name, it.price
let
	처리가 끝나면 최종값을 반환한다. (run과 같음)
	but 패러미터로 인스턴스를 넘긴 것 처럼 it을 통해서 인스턴스를 사용할 수 있다.

// also와 let이 패러미터를 통해서 인스턴스를 사용하는 과정을 거치는 이유
같은 이름의 변수나 함수가 scope 바깥에 중복되어있는 경우에 혼란을 방지하기 위해서이다.
ex) apply나 run은 인스턴스 내의 price 속성보다 run이 속해있는 main 함수의 price 변수를 우선시한다.

// 스코프 함수 정리
인스턴스의 속성이나 함수를 scope 내에서 깔끔하게 분리하여 사용할 수 있어서 코드의 가독성을 향상시킨다.





// 오브젝트(object)
생성자 없이 객체를 직접 만들어낸다.
여러개의 인스턴스 객체가 필요없고 단 하나의 객체만으로 공통적인 속성과 함수를 사용해야 하는 코드에서는 굳이 class를 쓸 필요 없이 오브젝트를 사용하면 된다.
오브젝트는 싱글톤 패턴을 언어 차원에서 지원한다.

// Singleton Pattern
클래스의 인스턴스를 단 하나만 만들어 사용하도록 하는 코딩 아키텍쳐 패턴

// 오브젝트 설명 이어서
오브젝트는 인스턴스를 생성하지 않고 그 자체로 객체이기 때문에 생성자는 사용하지 않는다.
오브젝트는 별도의 인스턴스를 생성하지 않기 때문에 오브젝트의 이름에 직접 참조연산자를 붙여 사용한다.
ex) Counter.count
★★★★오브젝트로 선언된 객체는 최초 사용시 자동으로 생성되며 이후에는 코드 전체에서 '공용으로 사용'될 수 있으므로 프로그램이 종료되기 전까지 공통적으로 사용할 내용들을 묶어서 만드는 것이 좋음.


// Companion Object
기존 클래스 안에서도 오브젝트를 만들 수 있음.
클래스의 인스턴스 기능은 그대로 사용하면서 인스턴스간에 ★★공용★★으로 사용할 속성 및 함수를 별도로 만드는 기능이다.
기능적으로는 기존 언어들이 가진 Static 멤버와 비슷하다.

클래스 내부에 companion object가 있으면 서로 다른 인스턴스여도 공통된 오브젝트를 공유하게 된다.
ex) a와 b는 서로 다른 인스턴스여도 공통된 오브젝트(companion object)를 공유하고 있기 때문에 모든 인스턴스에서 총 투표수를 누적할 수 있다.

// Static 멤버
클래스 내부에서 별도의 영역에 고정적으로 존재하여 인스턴스를 생성하지 않아도 공용으로 사용 가능한 속성이나 함수





// Observer 패턴
이벤트를 전달함.
코틀린에서 옵저버 패턴을 구현하는 방법
코딩에서는 이벤트가 일어나는 것을 감시하는 감시자의 역할이다.
ex) 키가 입력될 때, 터치가 발생할 때, 데이터가 수신됨 등등
이벤트가 발생할 때마다 '즉각적으로 처리'할 수 있도록 만드는 프로그래밍 패턴을 옵저버 패턴이라고 부른다.

// 이벤트
함수로 직접 요청하지 않았지만 시스템 또는 루틴에 의해서 발생하게 되는 동작들을 '이벤트'라고 부른다.

// 옵저버 설명 이어서
옵저버 패턴을 구현할 때는 두 개의 클래스가 필요하다.
1. 이벤트를 수신하는 클래스 (ex. ClassA)
2. 이벤트를 발생시켜 이를 알려주는 클래스 (ex. ClassB)
B에서 이벤트가 발생할 때 A에 있는 (이벤트를 처리하는) 함수를 호출하여 알려주는 방식이다.
★★★★ "두 클래스의 중간에서 콜백함수를 정의해 A클래스에서 B를 호출할 때 써먹을 수 있도록 해주는" 이 인터페이스를 옵저버, 코틀린에서는 listener라고 부른다. 이렇게 이벤트를 넘겨주는 행위를 callback이라고 한다.
옵저버 패턴은 이벤트를 기반으로 동작하는 모든 코드에서 광범위하게 쓰이는 방식이므로 이 구조를 이해하는 것이 중요하다.

// 객체지향의 다형성
★상속받아 만들어진 클래스는 수퍼클래스의 기능을 포함하여 제작되었으므로 수퍼클래스에서 정의한 부분만 따로 넘겨줄 수 있음.

// 익명 객체(Anonymous Object)
이름이 없는 객체
ex) EventPrinter(수신)가 EventListener(종)를 상속받아 구현하지 않고 임시로 만든 EventListener(종) 객체를 대신 넘겨줄 때 이 '임시로 만든 객체'를 뜻함.





// 클래스의 다형성(업캐스팅, 다운캐스팅)
ex) 그냥 목이 말라서 아무 음료나 마셔도 좋을 때도 있지만 기호에 맞춰 원하는 음료를 선택할 때도 있다. 이 중에 하나가 콜라라고 쳤을 때 콜라를 '콜라 자체'로도 볼 수 있지만 '음료'라는 특성으로도 볼 수 있도록 만드는 것이 다형성의 개념

ex2) 음료라는 클래스와 음료를 상속받은 콜라라는 클래스가 있다면 콜라는 음료의 객체 공간과 콜라의 추가 공간을 갖게 된다. 

이렇게 만들어진 콜라는 음료를 담는 변수에 저장하면 콜라의 추가 공간을 사용할 수 없게 되고(ex. var a:Drink = Cola()), 콜라를 담는 변수에 저장하면 콜라의 추가 기능까지 전부 사용할 수 있게 된다(ex. var b:Cola = Cola()).

이 때 콜라 인스턴스를 음료 변수에 담는 행위를 상위 자료형인 수퍼클래스로 변환한다고 하여 Up-Casting이라고 하고(전자), Up-Casting된 인스턴스를 다시 하위 자료형으로 변환하면 Down-Casting이라고 부른다.

업캐스팅은 상위 자료형에 담는 것으로도 동작하지만 다운캐스팅은 별도의 연산자(as, is)가 필요하다. 

// as
호환되는 자료형으로 변환해주는 캐스팅 연산자이다.
코드 내에서 사용할 시 즉시 자료형을 변환해주며 변환된 자료형을 반환도 해주는 연산자이다.
ex) var a: Drink = Cola()
	 a as Cola // 이 이후로 a는 Cola로 동작함
	 var b = a as Cola // a를 Cola로 반환한 값을 b에 저장
 
// is
변수가 자료형에 "호환"되는지를 먼저 체크한 후 변환해주는 캐스팅 연산자로 조건문 내에서 사용되는 특징이 있다.
ex) var a: Drink = Cola()
	 if(a is Cola) {
		// ★★★이 안에서만 a가 Cola가 됨
	 }

// 다형성 정리
클래스의 상속 관계에서 오는 인스턴스의 호환성을 적극적으로 활용할 수 있는 기능이다.
수퍼클래스가 같은 인스턴스를 한번에 관리하거나 인터페이스를 구현하여 사용하는 코드에서도 이용되므로 이해가 꼭 필요하다.





// Generic(제너릭)
클래스나 함수에서 사용하는 자료형을 외부에서 지정할 수 있는 기능

제너릭의 기능
	ex) ClassA, A를 상속받은 ClassB가 있다고 할 때, 하나의 함수에서 이 두 클래스의 인스턴스를 공용으로 사용하는 패러미터를 받으려면?
		fun castingExam(var a: A)는 B를 넣어도 A로 캐스팅된다.
			=> 두 클래스 모두 함수의 패러미터로 사용할 수 있다.
			하지만 캐스팅 연산을 거치는 것은 프로그램의 속도를 저하시킬 수 있다는 단점이 있음. 여기서 제너릭의 개념의 나옴.

제너릭은 클래스나 함수를 선언할 때 고정적인 자료형 대신 실제 자료형으로 대체되는 타입 패러미터를 받아 사용하는 방법이다.

캐스팅 없이도 다형성의 장점을 활용할 수 있다(자료형을 그대로 사용할 수 있다).

제너릭 안에 들어가는 타입 패러미터의 이름은 클래스 이름과 규칙이 같지만 일반적으로 Type의 이니셜인 T를 사용하는 것이 관례이며 여러개의 제너릭을 사용할 경우 T의 다음 알파벳인 U와 V를 추가적으로 사용하기도 한다.

제너릭을 특정한 수퍼클래스를 상속받은 클래스 타입으로만 제한하려면 콜론 뒤에 특정 수퍼클래스 이름을 적어주면 된다.
	ex) <T: SuperClass>

함수에 제너릭을 선언한 경우 일반적인 함수처럼 사용하면 패러미터나 반환형을 통해 타입 패러미터를 자동으로 추론해준다.
ex) fun <T> genericFunc (var param: T) {} 일 때
	 genericFunc(1)을 쓰면 프로그램은 T를 Int로 추론한다.

클래스에 제너릭을 써서 선언한 경우 이 클래스의 인스턴스를 만들 때 타입 패러미터를 수동으로 지정해줄 수 있으며
	ex) class GenericClass <T> { }일 때
		 GenericClass<Int> () // 수동으로 타입 패러미터를 Int로 지정
클래스 선언시 생성자에 제너릭이 사용된 경우엔 인스턴스 생성시에 데이터 타입을 반드시 지정해주지 않아도 입력된 데이터 타입을 자동으로 추론해준다.
	ex) class GenericClass <T> (var pref: T)
		 GenericClass(1) <- 이 때 T는 Int가 됨.

제너릭은 많은 기본 클래스에서도 사용되고 있으므로 꼭 알아둬야 한다.





// List
데이터를 코드에서 지정한 순서대로 저장해두는 기능
리스트는 데이터를 모아 관리하는 '컬렉션' 클래스를 상속받는 세가지 클래스들 중 가장 단순한 형태이다.
여러개의 데이터를 원하는 순서대로 넣어 관리하는 형태이다.
리스트에는 그냥 List<out T>와 MutableList<T>가 있다.


// List<out T>
생성시에 넣은 객체를 대체, 추가, 삭제할 수 없음
List를 만들 때는 전용 함수인 listOf(1,2,3)을 사용한다


// MutableList<T>
Mutable : 변할 수 있는
생성시에 넣은 객체를 대체, 추가, 삭제할 수 있음
MutableList를 만들 때는 전용 함수인 mutableListOf("A","B","C")를 사용한다.
MutableList에는 아래와 같은 함수를 쓸 수 있음
	add(데이터) // 요소의 추가
	add(인덱스, 데이터) // 요소의 추가? 변경?
	remove(데이터) // 요소의 삭제 방법 1
	removeAt(인덱스) // 요소의 삭제 방법 2
	shuffle() // 무작위 섞기
	sort() // 정렬
	mutableList[0] = 데이터 // 리스트의 요소를 변경(대체)

리스트는 목록이 필요한 모든 코드에서 가장 편리하게 사용할 수 있는 컬렉션이다.


// 컬렉션
리스트나 맵 등 여러개의 객체를 담을 수 있는 클래스들의 공통 기능을 구현해둔 클래스.





// 문자열을 다루는 법(예시 위주)
문자열을 나눌 때 기준이 되는 문자열은 delimiter라고 부른다.
코틀린에서는 자바와 달리 split()에 정규식이 아닌 일반 문자열을 넣어도 동작한다.





// nullable 변수에서 null값을 처리하는 방법
null 체크를 하기 위해 일일히 if문으로 조건을 체크하는 대신 좀 더 편리한 방법을 사용할 수 있다.
?. <== null safe operator // 널 세이프 연산자
	참조연산자 앞에 ?를 붙여 사용한다
	참조연산자를 실행하기 전에 먼저 객체가 null인지 확인부터하고 객체가 null이면 뒤따라오는 구문을 실행시키지 않는 연산자이다.
	이 연산자는 스코프 함수와 사용하면 더욱 편리하다.
?: <== elvis operator // 엘비스 연산자
	객체가 null이 아니라면 그대로 사용하지만 null이면 연산자 우측의 객체로 대체되는 연산자이다.
	ex) sample?:"default" <= sample이 null이면 "default" 값으로 대체해서 사용한다.
!!. <== non-null assertion operator // 논널 어설션 연산자
	참조연산자 앞에 느낌표 두개를 붙인다.
	참조연산자를 사용할 때 null 여부를 컴파일시 확인하지 않도록 하여 런타임이 null pointer exception이 나도록 의도적으로 방치하는 연산자이다.


// 변수 간에 동일성
동일성에는 두가지 개념이 있다.


// 내용의 동일성
	메모리상의 서로 다른 곳에 할당된 객체라고 해도 그 내용이 같으면 동일하다고 판단하는 것
	ex) var a = "사이다"
		 var b = "사이다" 일 때 a와 b는 같다고 보는 것
	 ★내용의 동일성을 판단하는 연산자
		a == b
		내용의 동일성은 자동으로 판단되는 것이 아닌 코틀린의 모든 클래스가 내부적으로 상속받는 Any라는 최상위 클래스의 equals() 함수가 반환하는 Boolean값으로 판단하게 된다.
	 기본 자료형에는 자료형의 특징에 따라 equals()함수가 이미 구현되어 있지만 커스텀 class를 만들 때는 이러한 equals()를 상속받아 동일성을 확인해주는 구문을 별도로 구현해야 한다.
		상속받는 함수
			open fun equals(other: Any?): Boolean
			// Boolean을 return받는 함수


// 객체의 동일성
	서로 다른 변수가 메모리상의 같은 객체를 가리키고 있을 때만 동일하다고 판단한다.
	★객체의 동일성을 판단하는 연산자
		a === b


// null 처리 & 동일성의 확인 정리
null 처리와 동일성의 확인은 프로그램 작성 도중 빈번하게 사용하는 기능이므로 동작 방식들을 잘 알고 사용하는 것이 좋다.





// 함수의 overloading
코틀린 역시 overloading이 지원된다.
	overloading
		같은 scope({}) 안에서 같은 이름의 함수를 여러개 만들 수 있는 기능.
	안 되는 오버로딩 예시
		fun a(x: Int, y: Int)
		fun b(z: Int, w: Int)


// 함수의 argument

// default arguments
패러미터를 받아야 하는 함수이지만 별다른 패러미터가 없더라도 기본값으로 동작해야 한다면 default arguments를 사용한다.

// named arguments
디폴트 패러미터값을 건너뛰고 다음(이상) 순서의 패러미터 값을 할당해야 할 때는 패러미터 옆에 직접 변수명을 입력해준다.
ex) deliveryItem("선물", destination = "친구집")
	// 중간에 입력해야하는 패러미터인 count는 입력하지 않고 건너뛰었으므로 default 값으로 들어감

// vararg : variable number of arguments
같은 자료형을 "개수에 상관없이" 패러미터로 받고싶을 때 사용하는 arguments


// infix 함수
연산자처럼 사용할 수 있는 함수.
ex) infix fun Int.multiply(x: Int): Int = this * x  일 때
	fun main() {
		// infix 함수 사용예 1
		println(6 multiply 4) // 6 * 4가 됨
		// infix 함수 사용예 2
		println(6.multiply(4)) // 위와 같은 결과값이 나옴.
	}
ex) class 안에서 infix 함수를 선언할 때에는 적용할 클래스가 자기 자신이므로 Int.multiply라고 적지 않고 그냥 multiply라고 적는다.





// 중첩클래스(Nested Class)
클래스 안에 클래스를 하나 더 넣을 수 있는 것.
하나의 클래스가 다른 클래스의 기능과 강하게 연관되어 있다는 의미를 전달하기 위해 만들어진 형식

class Outer {
	class Nested {
		
	}
}
에서 Nested를 호출하는 방법은 Outer.Nested()이다.
중첩 클래스는 형태만 내부에 존재할 뿐 실질적으로는 서로 내용을 직접 공유할 수 없는 별개의 클래스이다.
	Nested는 외부 클래스의 내용을 공유할 수 없다.


// 내부 클래스(Inner Class)
class Outer {
	inner class Inner {
		
	}
}
inner class는 혼자서 객체를 만들 수 없고 외부 클래스의 객체가 있어야만 생성과 사용이 가능하다.
내부 클래스는 외부 클래스 객체 안에서 사용되는 클래스이므로 외부 클래스 객체의 속성이나 함수를 사용할 수 있다.


// 중첩클래스와 내부클래스 정리
두 클래스 속성은 클래스간의 연계성을 표현하여 코드의 가독성 및 작성 편의성이 올라갈 수 있으므로 적절한 상황에서 사용하는 것이 좋다.





// Data Class
데이터를 다루는 데에 최적화된 클래스
5가지 기능을 내부적으로 자동으로 생성해준다.
1. 내용의 동일성을 판단하는 equals()
2. 클래스(객체)의 내용에서 고유한 해시코드를 반환해주는 hashcode()
3. 포함된 속성을 보기 쉽게 나타내는 toString()
4. 객체를 복사하여 똑같은 내용의 새 객체를 만드는 copy()
	copy()를 통해 새 객체를 생성할 때는 똑같은 내용의 객체를 생성할 수도 있지만
		ex) val a = Data("A", 7)
			 val b = a.copy() // 아무 패러미터가 없으면 똑같은 내용으로 생성함
	생성자와 똑같은 형태의 패러미터를 줘서 일부 속성을 변경해줄 수도 있다.
		ex) val b = a.copy("B")
		// 이렇게 copy()하면 b는 Data("B", 7)로 생성됨
5. 속성을 (순서대로) 반환하는 component~() 계열의 함수
	ex) Data("A", 7)일 때 component1()은 "A"이고 component2()는 7이다.
	이 함수는 사용자가 직접 호출하기 위한 함수가 아닌, 배열이나 클래스 등에 데이터 클래스의 객체가 담겨있을 때 이 내용을 자동으로 꺼내쓸 수 있는 기능을 지원하기 위한 함수들이다.





// Enum Class(이니움 클래스)
enumerated type <= 열거형
enum class 내에 상태를 구분하기 위한 객체들을 이름을 붙여 여러개 생성해두고
	ex) enum class Color {
		RED,
		BLUE,
		GREEN
	} // enum class인 Color의 객체를 생성하기 위한 선언 방식
그 중 하나의 상태를 선택하여 나타내기 위한 클래스

enum class 안의 객체들은 관행적으로 상수를 나타낼 때 사용하는 대문자로 기술한다.

enum의 객체들은 고유한 속성을 가질 수 있다.
ex) enum에 생성자를 만들어 속성을 받도록 하면 객체를 선언할 때 속성도 설정할 수 있다.
	ex) enum class Color (val number: Int) {
		RED(1),
		BLUE(2),
		GREEN(3)
	}

enum 클래스는 일반 클래스처럼 함수도 추가할 수 있다.
	ex) enum class Color (val number: Int) {
		RED(1),
		BLUE(2),
		GREEN(3); // 함수를 추가하려면 객체의 선언이 끝나는 위치에 세미콜론을 추가해 구분해야 한다.
		
		fun isRed() = this == Color.RED
	}

// Data Class & Enum Class 정리
두 클래스는 일반 클래스에서 제공되지 않는 특정한 용도의 기능들을 제공한다.





// Collection Class
컬렉션은 컬렉션 함수와 같이 사용하면 더욱 유용하다.

// Set
순서가 정렬되지 않으며 중복이 허용되지 않는 컬렉션
그러므로 인덱스로 위치를 지정하여 객체를 참조할 수 없고, contains()로 객체가 set 안에 존재하는지를 확인하는 식으로만 사용한다.
	ex) sampleSet.contains("디모")
초기화는 setOf(a, b, c)


// MutableSet
생성 이후 객체의 추가, 삭제가 가능하다.
추가는 .add(데이터), 삭제는 .remove(데이터)를 사용한다.
초기화는 mutableSetOf(a, b, c)


// Map
객체를 넣을 때 그 객체를 찾아낼 수 있는 key를 쌍으로 넣어주는 컬렉션
	key : 객체를 찾기 위한 값
	value : key와 연결된 객체

위 객체는 내부적으로는 MutableMap.MutableEntry의 객체로 담겨져있다.

이런 구조때문에 Map은 객체의 위치가 아닌 고유한 키를 통해 객체를 참조하는 특징을 가지고 있다.
	ex) sampleMap["디모"] // "디모"라는 key에 연결된 객체를 가져온다(참조한다)

같은 키에 다른 객체를 넣으면 기존의 객체가 대체된다.

데이터 타입 작성법 : Map<K, out V>


// MutableMap
기존 맵의 기능에서 추가, 삭제 기능을 더한 클래스.
데이터 타입 작성법 : MutableMap<K, V>
요소의 추가 : put(키, 값)
삭제 : remove(키)





//// 컬렉션 함수 1
코틀린은 함수형 언어의 특징을 가지고 있기 때문에 좀 더 편리하게 컬렉션을 사용할 수 있다

컬렉션 함수는 list, set, map과 같은 컬렉션 또는 배열에 일반함수 또는 람다함수 형태를 사용하여, for문 없이도 아이템을 순회하며 참조하거나 조건을 걸고, 구조의 변경까지 가능한 여러가지 함수를 지칭한다.

컬렉션 함수는 람다함수를 사용하여 컬렉션을 좀 더 편리하게 조작할 수 있는 장점을 가지고 있다.

경우에 따라 조건문과 반복문 대신 사용하면 편리하다.


// .forEach { 람다 }
ex) collection.forEach {
		println(it) // 컬렉션 안에 있는 객체를 하나씩 순서대로 불러낸다. (단순 호출)
	 }


// .filter { 람다 }
ex) collection.filter {
		it < 4 
		// it에 조건을 걸어주면 조건에 맞는 객체만 다시 컬렉션으로 만들어 반환해준다. (조건적 호출)
	 }


// .map { 람다 }
ex) collention.map {
		it * 2 
		// it에 수식을 적용하면 각 객체에 적용된 값들을 다시 collection으로 반환해준다. (값 변경 후 호출)
	 }


// .any & .all & .none { 람다 }
ex) collection.any { it == 0 }
		// .any <= 객체들 중 하나라도 조건에 맞으면 true
	 collection.all { it == 0 }
		// .all <= 객체 모두가 이 조건에 맞으면 true
	 collection.none { it == 0 }
		// .none <= 객체 모두가 하나도 조건에 맞지 않으면 true


// .first() (일반함수)
ex) collection.first() // 이 컬렉션의 첫번째 아이템을 반환


// .first { 람다 }
ex) collection.first { it > 3} // 조건에 맞는 첫번째 아이템을 반환
.find (람다)함수로 대체할 수 있다
조건에 맞는 객체가 없는 경우(컬렉션이 비어있는 경우) NoSuchElementException 에러가 발생한다.
	★★★★ 이 때는 .firstOrNull (람다)함수를 사용하면 객체가 없는 경우 null을 반환해준다.


// .last { 람다 }
ex) collection.last { it > 3 } // 조건에 맞는 마지막 아이템을 반환
.findLast (람다)함수로 대체할 수 있다
조건에 맞는 객체가 없는 경우(컬렉션이 비어있는 경우) NoSuchElementException 에러가 발생한다.
	★★★★ 이 때는 .lastOrNull (람다)함수를 사용하면 객체가 없는 경우 null을 반환해준다.


// .count() (일반함수)
ex) collection.count() // 컬렉션의 모든 아이템의 개수를 반환


// .count { 람다 }
ex) collection.count { it > 7 } 
	// 조건에 맞는 아이템의 개수만 반환해준다.


컬렉션 함수들을 사용하면 반복문과 조건문을 대부분 대체할 수 있다.





//// 컬렉션 함수 2
컬렉션의 형태를 완전히 바꿔주는 컬렉션 함수들.
컬렉션 함수는 데이터의 조작을 더 수월하게 만들 수 있는 다양한 기능을 갖고 있으므로 컬렉션에 담긴 데이터를 다룰 때 잘 활용해보자.

// .associateBy{}
아이템에서 key를 추출하여 Map 타입으로 변환하는 함수
ex) 
	var collection = listOf(Person("시아", 2003), Person("유나", 2001), Person("하은", 2003))
이 있을 때, 이 리스트를 이름을 key로 하고 탄생 년도를 value로 하는 Map으로 변경하려고 한다.
	collection.associateBy{ it.name }
이럴 때 이렇게 적어주면 name을 키로 하고 나머지 값을 value로 하는 Map으로 변환해서 반환해준다.


// .groupBy{}
key가 같은 아이템끼리 배열로 묶어 Map 타입으로 만드는 함수
특정한 값을 key로 지정하여 해당 값을 가진 객체끼리 묶은 ★★★★"배열을 value로 하는"★★★★ Map을 만들어주는 기능이다.
ex)
	var collection = listOf(Person("시아", 2003), Person("유나", 2001), Person("하은", 2003))
이 있을 때, 탄생 년도끼리 배열로 묶어 Map으로 만들고 싶다.
	collection.groupBy{ it.birthYear }
그럴 땐 위와 같이 적으면 된다.


// .partition{}
아이템에 조건을 걸어 true인지 false인지에 따라 두개의 컬렉션으로 나누어준다.
ex)
	var collection = listOf(Person("시아", 2003), Person("유나", 2001), Person("하은", 2003))
이 있을 때, 2002년도를 기준으로 두 그룹으로 나누고 싶다.
	collection.partition{ it.birthYear > 2002 }
이렇게 적어주면 위 조건에 맞게 두 컬렉션으로 나눠진다.(컬렉션 속성은 유지된다)

이렇게 나눠진 두 컬렉션은 두 객체를 담을 수 있는 Pair라는 클래스의 객체로 반환된다.
	이 때 각각의 컬렉션을 first, second로 참조하여 사용할 수 있다.

또는 Pair를 직접 받아줄 수 있도록 변수 이름을 괄호 안에 두 개 선언해주면 각각의 변수 이름으로 받을 수 있다.
ex) 
	val (over2002, under2002) = 
			collection.partition{ it.birthYear > 2002 }
이렇게 해주면
	val over2002 = listOf(
		Person("시아", 2003), Person("하은", 2003))
	val under2002 = listOf(Person("유나", 2001))
가 된다.


// .flatMap{}
아이템마다 만들어진 컬렉션을 합쳐서 반환하는 함수
중괄호 안에서 아이템마다 새로운 컬렉션을 생성하면 이를 합쳐서 하나의 컬렉션으로 반환해준다.
ex) collection에 2와 3이라는 값이 들어있을 때
collection.flatMap{ listOf(it*3, it+3) }
을 하면(중괄호 안에서 새 컬렉션을 만들면) 6, 5, 9, 6의 값들이 담긴 컬렉션이 반환된다.


// .getOrElse
지정한 인덱스 위치에 아이템이 있으면 아이템을 반환하고 아닌 경우 지정한 기본값을 반환하는 함수
괄호 안에 지정한 "인덱스"에 객체가 존재하는 경우 해당 객체를 반환하고, 없는 경우 중괄호 안의 객체를 반환해준다.
ex) collection.getOrElse(1) {50}
	// 1번 인덱스가 있으면 1번 인덱스의 값을 반환하고, 없으면 중괄호 안에 적힌 (50이라는) 값을 반환한다.


// zip
두 컬렉션에서 순서대로 각각 뽑아낸 객체를 1:1의 "Pair Class의 객체로 만들어" "List에 넣어" 반환해준다.
이 때 결과 List의 아이템의 개수는 더 작은 컬렉션을 따라가게 된다.
ex) A컬렉션 개수 4개, B컬렉션 개수가 5개이면 A컬렉션의 개수를 따라간다.
ex) collectionA zip collectionB





//// 변수의 고급 기술

// 변수에 대해 주의해야 할 내용
var는 한 번 할당한 객체가 있더라도 다른 객체로 변경하여 할당할 수 있다.
ex) var a = 0
	 a = 1 이 가능

val은 객체를 한 번 할당하면 할당된 객체를 다시 변경할 수 없다.
ex) val a = 0
	 a = 1 이 불가능

val은 할당된 객체를 바꿀 수 없을 뿐이지 객체 내부의 속성을 변경할 수 없는 것은 아니다.
	??? 뭔소리지 알 것도 같고.


// 상수(constants)
컴파일 시점에 결정되어 절대 바꿀 수 없는 값
ex) const val CONST_A = 1234

상수로 선언될 수 있는 값은 String을 포함한 기본 자료형만 가능하다.
	런타임에 생성될 수 있는 일반적인 다른 클래스의 객체들은 담을 수 없다.

★★★★상수는 클래스의 속성이나 함수의 지역 변수등으로는 사용할 수 없으며 반드시 companion object 안에 선언하여 객체의 생성과 관계없이 클래스와 관계된 고정적인 값으로만 사용하게 된다.

상수의 이름을 만들 때는 의례적으로 대문자와 언더바만 사용한다. 이런 특징을 통해 변수가 아닌 상수라는 점을 알 수 있다.

변수의 경우 런타임시 객체를 생성하는데 시간이 더 소요되어 성능의 하락이 있다. 따라서 늘 고정적으로 사용할 값은 상수를 통해 "객체의 생성없이" "메모리에 값을 고정하여" 사용함으로서 성능을 향상시킬 수 있다는 장점이 있다.


// lateinit(늦은 초기화)
코틀린에서는 변수를 선언할 때 객체를 바로 할당하지 않는 경우에는 기본적으로 컴파일이 되지 않는다.

경우에 따라서는 변수에 객체를 할당하는 것을 선언과 동시에 할 수 없을 때도 있다. 

이럴 때는 var 앞에 lateinit을 붙여 일단 변수만 선언하고 초기값의 할당은 나중에 할 수 있도록 하는 키워드이다.

lateinit var 변수의 제한사항은 초기값을 할당하기 전까지는 변수를 사용할 수 없다. 사용시 에러가 발생한다.

String을 제외한 기본 자료형에는 사용할 수 없다.

lateinit 변수의 초기화를 하였는지의 여부를 확인할 때에는 아래의 방법을 사용한다.
	★★★★ ex) ::a.isInitialized // 변수 이름 앞에는 ::를 붙이고, 변수 이름 뒤에는 .isInitialized를 붙인다
이렇게 하면 초기화가 되었는지 확인하여 사용해 오류를 막을 수 있다.


// 초기화의 지연 : 지연 대리자 속성(lazy delegate properties)
변수를 사용하는 시점까지 "자동으로" 초기화를 늦춰주는 속성.
ex) val a: Int by lazy {7}
	// "val a: Int" 변수에 "by"라는 키워드를 붙이고 뒤에 "lazy{}"라는 "람다함수 형태의 "초기화 함수""를 사용하는 형태이다. 여기서 by는 =에 빗댈 수 있을 것 같음.
코드에서는 선언시 즉시 객체를 생성 및 할당하여 변수를 초기화하는 형태를 가지고 있지만, 실제 실행시에는 변수를 사용하는 그 시점에 초기화 과정을 진행함으로서 코드의 실행 시간을 최적화할 수 있는 코드이다.
람다함수로 초기화가 진행되므로 함수 안에 여러개의 구문이 들어갈 수 있으며, 맨 마지막 구문의 결과가 변수에 할당됨을 알아두자.


// 상수, 늦은 초기화, 초기화의 지연 정리
위 세가지는 상황에 따라 변수를 사용하는 방법을 조금 더 세세하게 조절할 수 있다는 장점이 있다.





// 비트 연산
비트 연산은 정수형 변수를 사람이 사용하는 10진법으로 연산하는 대신 2진법인 비트 단위로 연산할 수 있는 기능이다.
ex) 10진법 예시 : 173
	  2진법 예시 : 10101101

비트 연산은 아주 제한적인 경우에만 사용하지만 반드시 알아야 할 중요한 연산이다.

실무에서 비트연산은 
	1) 거의 계산에는 사용하지 않는다. 2진법을 이용한 연산 최적화가 필요하다면 컴파일러의 기능을 사용하는 경우가 대부분이다.
	2) 정수형의 값을 비트 단위로 나누어 데이터를 좀 더 작은 단위로 담아 경제성을 높이기 위한 용도로 사용한다.
		ex) 32비트인 인티저 타입 안에 32개의 0과 1로 된 서로 다른 값을 넣는다거나, 앞의 5비트와 뒤의 27비트에 서로 다른 값을 넣는 식으로, 변수 하나에 여러개의 값을 담아 사용할 수 있다.
비트연산을 사용하는 부하도 무시할 수 없으므로, 주로 플래그 값을 처리하거나 네트워크 등에서 프로토콜의 데이터 양을 줄이기 위해 자주 사용된다.

정수형 변수에 비트연산을 할 때는 좌측으로 갈수록 상위 비트, 우측으로 갈수록 하위 비트이다.
	참고로 코틀린은 모든 정수형이 부호를 포함하므로, 최상위 비트를 -인지 +인지를 표시하는 부호 비트로 사용하기 때문에, 이 부분에는 데이터를 담지 않는 것이 좋다.

// 플래그 값
	여러개의 상태값을 0과 1로 담는 방법

// 기타 정보
	부호 없는 정수형 만들기도 실험 중에 있다고 한다.


// bitwise shift operators (비트를 밀어주는 연산자)

shl(shift left) : 부호 비트(최상위 비트)를 제외한 모든 비트를 좌측으로 원하는 만큼 밀 수 있다

shr(shift right) : 부호 비트(최상위 비트)를 제외한 모든 비트를 우측으로 원하는 만큼 밀 수 있다

ushr(unsigned shift right) : 부호 비트를 포함하여 모든 비트를 우측으로 밀어주는 기능


// bitwise operators (비트를 조작하는 연산자)
// and
	원본과 비교대상의 값을 비트단위로 비교하여 둘 다 1인 자리만 1로 반환된다.
		ex) 1010 and 0110 <= 0010으로 반환됨

	and 의 특징으로 활용할 수 있는 두가지 기능
	1. 비트를 확인하는 용도
			원본과 비교를 원하는 위치에 1을 넣어보면 그 위치의 값이 1인지 0인지를 and 연산자의 결과값으로 추론해볼 수 있다.
	2. 비트의 clear 연산 ( 특정 값을 0으로 만들기)
			비트를 0으로 만들고 싶은 부분에만 0을 넣어 연산해주면, 1인 부분만 남고 나머지는 모두 clear 된다. 


// or
	값을 비교하여 비트가 둘 중 하나라도 1인 자리는 1로 반환한다.
		ex) 1010 or 0110 <= 1110으로 반환됨
	
	or 의 특징으로 활용할 수 있는 기능
	비트의 set 연산, 즉 비트값을 1로 설정하고 싶을 때 사용한다. 비트를 1로 만들고 싶은 부분에만 1을 넣어 or 연산을 해주면, 0인 부분은 그대로 남고 1인 부분만 set(1)이 된다.

// xor
	비트가 "같은" 자리는 0, "다른" 자리는 1로 반환한다.
		ex) 1010 xor 0110 <= 1100으로 반환됨
	
	xor 의 특징으로 활용할 수 있는 기능
	비교할 두 값이 비트별로 같은지를 확인하는 데에 사용한다.


// inv() (비트 반전 함수)
0은 1로, 1은 0으로 비트를 모두 반전시키는 역할을 한다.





// 코루틴을 통한 비동기 처리

// 코루틴(coroutine)
코루틴을 사용해 비동기로(여러개의 루틴을 동시에) 처리할 수 있다.
비동기 처리를 지원한다.

코루틴은 메인이 되는 루틴과 별도로 진행이 가능한 루틴으로 개발자가 루틴의 실행과 종료를 마음대로 제어할 수 있는 단위이다.

코루틴을 사용할 때는 아래의 패키지(coroutines 패키지)를 모두 import해야 한다.
★★★★ import kotlinx.coroutines.*

// 코루틴의 Scope
코루틴은 제어 범위 및 실행 범위를 지정할 수 있다.

// GlobalScope
프로그램의 어디서나 제어, 동작이 가능한 코루틴 기본 범위

// CoroutineScope
특정한 목적의 Dispatcher를 지정하여 제어 및 동작이 가능한 새로운 코루틴의 범위를 생성한다.

// CoroutineScope를 만들 때 적용가능한 Dispatcher
Dispatcher.Default
	// 백그라운드에서 동작하는 디스패처(기본적인 백그라운드 동작)
Dispatchers.IO
	// 네트워크나 디스크 등 I/O에 사용하는 디스패처
Dispatchers.Main
	// 메인(UI) 스레드에서 함께 동작하는 디스패처

이러한 디스패처들은 모든 플랫폼에서 지원되지는 않는다. 지원되는 플랫폼에 따라서 사용해야 한다.

코루틴은 이러한 Scope에서 제어되도록 생성될 수 있다.
생성된 스코프에서 launch나 async라는 함수를 통해 새로운 코루틴을 생성할 수 있다.
ex) val scope = CoroutineScope(Dispatcher.Default)
	 val coroutineA = scope.launch{}
	 val coroutineB = scope.async{}
// launch와 async 비교
launch는 반환값이 없는 Job 객체
async는 반환값이 있는 Deffered 객체

launch, async는 모두 람다함수이다.
반환값이 있는 async는 마지막 구문의 실행 결과가 반환됨.
ex) launch{
		for(i in 1..10) {
			println(i)
		}
	 } // launch는 반환값 없음
	 
ex2) async{
			var sum = 0
			for(i in 1..0) {
				sum++
			}
			sum // 마지막 값이 반환된다
	   }

// 실행되지 않는 코드 예시
	import kotlinx.coroutines.* 

	fun main() {
		val scope = GlobalScope
		scope.launch { // 스코프에 '.launch {}'를 씀으로서 Job 객체의 코루틴 하나를 만들음.
			for(i in 1..5) {
				println(i)
			}
		}
	}

// 예시 해설
코루틴은 제어되는 스코프 또는 프로그램 전체가 종료되면 함께 종료되기 때문에, 코루틴이 끝까지 실행되는 것을 보장하려면 일정한 범위에서 코루틴이 모두 실행될 때까지 잠시 기다려주어야 한다.
	테스트 페이지(위 코드)의 경우 main()함수 단 하나이기 때문에 프로세스가 거의 '실행 즉시 종료'되므로 코루틴도 동작하지 못했다.
		이럴 때는 "runBlocking{} 블럭" 안에서 코루틴을 사용하면 된다. 아래처럼 runBlocking{}을 사용하면 런블록킹 내부의 코루틴들이 종료될 때까지 메인 루틴을 잠시 대기시켜 준다.
		ex) runBlocking{
				launch {}
				async {}
			 }
		runBlocking{} 사용시 주의해야 할 점은, 메인 스레드에서 runBlocking을 걸어주고서 일정 시간 이상 응답이 없는 경우 ANR이 발생해 앱이 강제 종료된다는 점이다.

// ANR(Application Not Responding) : 응답없음 오류

실행되는 코드는 예시 코틀린 파일 참고.

//// 루틴의 동기(대기 후) 실행을 위한 "blocking 함수" 4가지
// 첫번째는 위의 runBlocking{} 람다함수.

// delay(milisecond: Long) 함수 : 루틴 대기 함수 2
milisecond 단위로 루틴을 잠시 대기시키는 함수


// Job.join() : 루틴 대기 함수 3
Job의 실행이 끝날 때까지(루틴이 모두 실행될 때까지) 대기하는 함수


// Deferred.await() : 루틴 대기 함수 4
Deferred의 실행이 끝날 때까지(루틴이 모두 실행될 때까지) 대기하는 함수
Deferred의 결과값을 반환해주는 함수이기도 하다.


// delay, join, await 세 함수의 공통점
코루틴 내부 또는 runBlocking과 같은, 루틴의 대기가 가능한 구문 안에서만 동작이 가능하다.


// .cancel()
코루틴 실행 도중에 중단하기
코루틴에 .cancel()을 걸어주면 다음 두가지 조건이 발생하며 코루틴을 중단시킬 수 있다.
1. 코루틴 내부의 delay()함수 또는 yield()함수가 사용된 위치까지 수행된 뒤 종료함
2. cancel()로 인해, 코루틴 내부에서 속성값인 isActive가 false가 되므로 이를 확인하여 수동으로 종료함


// .withTimeoutOrNull() {}
제한 시간 내에 수행되면 결과값을, 아니면 null을 반환하는 함수
ex) withTimeoutOrNull(50) { 
		// 파라미터에 밀리세컨 단위의 초(타임아웃 시간)를 입력
		for(i in 1..1000) {
			println(i)
			delay(10)
		} // 코루틴 구문을 만든다
		"Finish" // 결과값
	 }
이 함수도 join()이나 await() 처럼 blocking 함수이다.


