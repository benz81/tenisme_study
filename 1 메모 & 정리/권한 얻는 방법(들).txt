권한 얻기 순서

	1. AndroidManifest.xml에서 필요한 권한 입력
		- 퍼미션 권한 레벨 중 normal은 2번으로 갈 필요 없음
		- 여기서는 오타가 나거나 없는 권한을 적어도 잘못된 입력이라는 오류를 표시해주지 않으므로 신경쓸 것
	2. 아래의 방법 1, 2, 3 중 필요한 방법으로 필요한 액티비티에서 코딩

부연설명

	- 1, 2번은 2개 이상의 권한 획득시 써먹을 수 있는 방법들임. 권한 1개 획득은 그냥 검색해보면 많이 나옴.
	- 3번은 특수 권한(SYSTEM_ALERT_WINDOW) 획득에 대한 방법(이 권한은 1, 2번을 사용해서 얻을 수 없음)
	- 아래 예시들 전부 Kotlin으로 작성됨

==  방법 1

private fun checkPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            // 마시멜로우 이상일 경우 권한 체크
            var permissionCheck = ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.READ_PHONE_STATE
            )
            val arrayPermission = mutableListOf<String>()

            if(permissionCheck != PackageManager.PERMISSION_GRANTED) {
                arrayPermission.add(android.Manifest.permission.READ_PHONE_STATE)
            }
			
			permissionCheck = ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.아무권한
            )
			
			if(permissionCheck != PackageManager.PERMISSION_GRANTED) {
                arrayPermission.add(android.Manifest.permission.아무권한)
            }

			...

            if(arrayPermission.size > 0) {
                ActivityCompat.requestPermissions(
                    this,
                    arrayPermission.toTypedArray(),
                    PERMISSION_REQUEST_CODE
                )
            } else {
                // 권한을 모두 허가한 상태일 때
                isLockScreenOn = sp.getBoolean("isLockScreenOn", true)
                if(isLockScreenOn) {
                    LockScreen.active()
                }
            }
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        when(requestCode) {
            PERMISSION_REQUEST_CODE -> {
                if (grantResults.isEmpty()) {
                    Toast.makeText(this, "Failed get permission", Toast.LENGTH_SHORT).show()
                    super.onRequestPermissionsResult(requestCode, permissions, grantResults)
                    return
                }

                for (i in grantResults) {
                    if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {
                        Toast.makeText(
                            this,
                            "Permission is denied : ${permissions[i]}",
                            Toast.LENGTH_SHORT
                        ).show()
                        finish()
                        return
                    }
                }

                Toast.makeText(this, "Permission is granted", Toast.LENGTH_SHORT).show()

                // 권한을 모두 허가한 상태일 때
                isLockScreenOn = sp.getBoolean("isLockScreenOn", true)
                if (isLockScreenOn) {
                    LockScreen.active()
                }
            }
        }
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
    }





==  방법 2 (골라내기 귀찮으니까 클래스 통째로 복붙함)

class MainActivity : AppCompatActivity() {

    private lateinit var button: Button
    private lateinit var layoutMain: ConstraintLayout
    private lateinit var sp: SharedPreferences

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        sp = getSharedPreferences("permissionTest", MODE_PRIVATE)
        var isFirstCheckOfPermission = sp.getBoolean("isFirstCheckOfPermission", true)

        layoutMain = findViewById(R.id.layoutMain)
        button = findViewById(R.id.button)

        button.setOnClickListener {

            lateinit var permissions: MutableList<String>
            // 마시멜로우 이상일 경우 권한 체크
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                permissions = mutableListOf(
                        Manifest.permission.READ_PHONE_STATE, // 전화 상태(통화 상태)에 대한 읽기 전용 액세스 권한
						권한2,
						권한3,
						...
                )
            } else {
                Toast.makeText(this, "모든 권한 얻기 성공", Toast.LENGTH_SHORT).show()
            }

            val arrayPermission = permissions.toTypedArray()

            if (hasAllPermissions(this, arrayPermission)) {
                Toast.makeText(this, "모든 권한 얻기 성공", Toast.LENGTH_SHORT).show()
            } else {
                if(hasPermissionsDenied(this, arrayPermission)) {
                    val snackBar = Snackbar.make(
                            layoutMain,
                            "잠금화면 기능을 정상적으로 사용하기 위해서는 요청하는 모든 권한에 대한 승인이 필요합니다.",
                            Snackbar.LENGTH_INDEFINITE
                    )
                    snackBar.setAction("권한승인") {
                        ActivityCompat.requestPermissions(this, arrayPermission, PERMISSION_REQUEST_CODE)
                    }
                    snackBar.show()
                } else {
                    if (isFirstCheckOfPermission) {
                        // 2.2. 승인요청을 한적이 없는 경우
                        // 권한 승인을 처음 물어봤는가에 대한 여부를 SP에 저장 후
                        val edit = sp.edit()
                        edit.putBoolean("isFirstCheckOfPermission", false)
                        edit.apply()
                        isFirstCheckOfPermission = sp.getBoolean("isFirstCheckOfPermission", true)
                        // 권한을 (처음) 요청
                        ActivityCompat.requestPermissions(this, arrayPermission, PERMISSION_REQUEST_CODE)
                    } else {
                        // 2.3. 사용자가 권한을 거부하면서 "다시 묻지않음" 옵션을 선택한 경우
                        // requestPermissions 를 요청해도 창이 나타나지 않기 때문에
                        // 유저가 직접 앱 설정에서 권한을 승인할 수 있도록 이동을 유도한다.
                        val snackBar = Snackbar.make(
                                layoutMain,
                                "잠금화면 기능을 정상적으로 사용하기 위해 필요한 권한이 있습니다. 확인을 누르면 설정 화면으로 이동합니다.",
                                Snackbar.LENGTH_INDEFINITE
                        )
                        snackBar.setAction("확인") {
                            val intent = Intent()
                            intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
                            val uri = Uri.fromParts("package", packageName, null)
                            intent.data = uri
                            startActivity(intent)
                        }
                        snackBar.show()
                    }
                }
            }
        }
    }

    private fun hasAllPermissions(context: Context, permissions: Array<String>): Boolean =
            permissions.all {
                // .all {} <= 객체들을 내부 조건에 각각 하나씩 대응시키고, 그 결과가 전부 true 여야 true 를 반환함
                ContextCompat.checkSelfPermission(context, it) == PackageManager.PERMISSION_GRANTED
            }

    private fun hasPermissionsDenied(activity: Activity, permissions: Array<String>): Boolean =
            permissions.any {
                // .any {} <= 객체들을 내부 조건에 각각 하나씩 대응시키고, 하나라도 true 이면 true 를 반환.
                // 아래 조건에서 true 는 해당 권한에 대해 '승인 거절'을 했음을 의미함
                ActivityCompat.shouldShowRequestPermissionRationale(activity, it)
            }

    companion object {
        const val PERMISSION_REQUEST_CODE = 0
    }

    @Suppress("UNCHECKED_CAST")
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if(requestCode == PERMISSION_REQUEST_CODE) {
            if(hasAllPermissions(this, permissions as Array<String>)) {
                Toast.makeText(this, "모든 권한 얻기 성공", Toast.LENGTH_SHORT).show()
            }
        }
    }
}





==  ★방법 3 (SYSTEM_ALERT_WINDOW 권한 얻기)

--  선행 : AndroidManifest.xml에 있어야 하는 권한들
<uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />

--  이하 액티비티 코딩

if (!Settings.canDrawOverlays(this)) { // 다른앱 위에 그리기 체크
	// 권한이 체크되어있지 않은 경우
	val uri: Uri = Uri.fromParts("package", packageName, null)
	val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, uri)
	startActivityForResult(intent, ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE)
} else {
	// 권한이 이미 체크되어있는 경우
	isLockScreenOn = sp.getBoolean("isLockScreenOn", true)
	if(isLockScreenOn) {
		LockScreen.active()
	}
}

@TargetApi(Build.VERSION_CODES.M)
override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
	super.onActivityResult(requestCode, resultCode, data)
	if (requestCode == PERMISSION_REQUEST_CODE) {
		if (!Settings.canDrawOverlays(this)) {
			// 권한을 체크하지 않고 돌아온 경우
			finish()
		} else {
			// 권한을 체크하고 돌아온 경우
			isLockScreenOn = sp.getBoolean("isLockScreenOn", true)
			if(isLockScreenOn) {
				LockScreen.active()
			}
		}
	}
}

--  "SYSTEM_ALERT_WINDOW" 래퍼런스 설명

Allows an app to create windows using the type WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, shown on top of all other apps. Very few apps should use this permission; these windows are intended for system-level interaction with the user.

Note: If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen. The app requests the user's approval by sending an intent with action Settings.ACTION_MANAGE_OVERLAY_PERMISSION. The app can check whether it has this authorization by calling Settings.canDrawOverlays().

Protection level: signature|preinstalled|appop|pre23|development

Constant Value: "android.permission.SYSTEM_ALERT_WINDOW"